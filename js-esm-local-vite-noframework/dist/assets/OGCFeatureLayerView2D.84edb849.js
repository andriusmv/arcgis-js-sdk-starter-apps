import{X as e,Y as i,Z as r,a}from"./vendor.d9ce5f39.js";import{Z as s}from"./FeatureLayerView2D.20fb5708.js";import"./clickToleranceUtils.bcc7d4ae.js";import"./definitions.8ca8ae21.js";import"./LayerView.40944e0c.js";import"./Container.bf5ca5d5.js";import"./mat4f32.9c1247c6.js";import"./schemaUtils.0eb86d06.js";import"./Utils.da6d3650.js";import"./Texture.dc80c2a5.js";import"./MaterialKey.57c8719e.js";import"./visualVariablesUtils.dbcf4ed6.js";import"./CIMSymbolHelper.0c49f829.js";import"./Rect.96506681.js";import"./BidiEngine.82513d9e.js";import"./MD5.a7f2b001.js";import"./popupUtils.60469bd9.js";import"./drapedUtils.67f382a1.js";const t=s=>{let t=class extends s{initialize(){const{layer:e,view:i}=this;e.source.supportsSpatialReference(i.spatialReference)||this.addResolvingPromise(Promise.reject(new a("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:e})))}get availableFields(){return this.layer.fieldsIndex.fields.map((e=>e.name))}};return e([i()],t.prototype,"layer",void 0),e([i({readOnly:!0})],t.prototype,"availableFields",null),t=e([r("esri.views.layers.OGCFeatureLayerView")],t),t};let l=class extends(t(s)){};l=e([r("esri.views.2d.layers.OGCFeatureLayerView2D")],l);var o=l;export default o;
