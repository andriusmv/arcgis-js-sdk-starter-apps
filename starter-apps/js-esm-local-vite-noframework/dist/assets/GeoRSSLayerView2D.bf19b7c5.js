import{cG as e,cf as i,cm as s,cO as t,cP as r,G as o,bJ as a,X as p,Z as l}from"./vendor.d9ce5f39.js";import{l as n,d as c}from"./LayerView.40944e0c.js";import{i as h}from"./GraphicContainer.0ab77261.js";import{i as m}from"./BaseGraphicContainer.3c4a9b0e.js";import"./Container.bf5ca5d5.js";import"./mat4f32.9c1247c6.js";import"./Utils.da6d3650.js";import"./Texture.dc80c2a5.js";import"./quantizationUtils.9290a852.js";import"./json.df9e51f4.js";import"./Matcher.e3ba91ea.js";import"./definitions.8ca8ae21.js";import"./TileStore.aa2e8337.js";import"./FeatureSetReader.d4cae64c.js";import"./centroid.f7592ee4.js";import"./visualVariablesUtils.66f69d02.js";import"./visualVariablesUtils.dbcf4ed6.js";import"./quickselect.c0fda8e0.js";import"./tileUtils.b7734edb.js";import"./schemaUtils.0eb86d06.js";import"./MaterialKey.57c8719e.js";import"./CIMSymbolHelper.0c49f829.js";import"./Rect.96506681.js";import"./BidiEngine.82513d9e.js";import"./MD5.a7f2b001.js";import"./GeometryUtils.c1792d3b.js";import"./earcut.b5c0cad1.js";import"./TileClipper.d28c086b.js";import"./VertexArrayObject.7996ec24.js";import"./FeatureContainer.12c70000.js";import"./TileContainer.b607574d.js";import"./WGLContainer.4311c483.js";import"./ShaderCompiler.f286663b.js";import"./config.042ea55e.js";let y=class extends(n(c)){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}hitTest(e,i){if(this.suspended||!this.graphicsViews.length)return Promise.resolve(null);const s=this.graphicsViews.reverse().map((s=>s.hitTest(e,i)));return Promise.all(s).then((e=>e.filter(((e,i)=>(e&&(e.popupTemplate=this._popupTemplates.get(this.graphicsViews[i]),e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){if(this.graphicsViews)for(const i of this.graphicsViews)i.processUpdate(e)}attach(){this.layer.featureCollections.forEach((o=>{const a=e.fromJSON(o.featureSet),p=new(i.ofType(s))(a.features);let l;if(this._graphicsViewMap[a.geometryType])l=this._graphicsViewMap[a.geometryType],l.graphics.addMany(p);else{const e=o.layerDefinition.drawingInfo,i=o.popupInfo?t.fromJSON(o.popupInfo):null,s=r(e.renderer);l=new m({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:p,renderer:s,container:new h(this.view.featuresTilingScheme)}),this._graphicsViewMap[a.geometryType]=l,this._popupTemplates.set(l,i),"polygon"!==a.geometryType||this.layer.polygonSymbol?"polyline"!==a.geometryType||this.layer.lineSymbol?"point"!==a.geometryType||this.layer.pointSymbol||(this.layer.pointSymbol=s.symbol):this.layer.lineSymbol=s.symbol:this.layer.polygonSymbol=s.symbol,this.graphicsViews.push(l),this.container.addChild(l.container)}})),this.handles.add([o(this.layer,"polygonSymbol",(e=>{this._graphicsViewMap.polygon.renderer=new a({symbol:e})})),o(this.layer,"lineSymbol",(e=>{this._graphicsViewMap.polyline.renderer=new a({symbol:e})})),o(this.layer,"pointSymbol",(e=>{this._graphicsViewMap.point.renderer=new a({symbol:e})}))])}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};y=p([l("esri.views.2d.layers.GeoRSSLayerView2D")],y);var d=y;export default d;
